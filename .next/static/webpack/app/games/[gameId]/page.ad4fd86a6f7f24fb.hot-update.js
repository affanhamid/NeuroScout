"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/games/[gameId]/page",{

/***/ "(app-pages-browser)/./src/components/game-components/games/Grid.tsx":
/*!*******************************************************!*\
  !*** ./src/components/game-components/games/Grid.tsx ***!
  \*******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _Game__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Game */ \"(app-pages-browser)/./src/components/game-components/Game.tsx\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./src/components/game-components/utils/index.ts\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\n\nconst HIGHLIGHT_COLOR = \"#FFFF00\";\nconst FADED_COLOR = \"rgba(255, 255, 255, 0.2)\";\nclass GridGame extends _Game__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    componentWillUnmount() {\n        if (true) {\n            window.removeEventListener('resize', this.handleResize);\n        }\n    }\n    calculateDistance(p1, p2) {\n        return Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2);\n    }\n    initializePoints() {\n        const gridSize = this.gridSizeRef.current;\n        const gridTotalSize = this.gridTotalSizeRef.current;\n        const canvas = this.canvasRef.current;\n        if (!canvas) return;\n        const cellSize = gridTotalSize / (gridSize - 1);\n        const startX = (canvas.width - gridTotalSize) / 2;\n        const startY = (canvas.height - gridTotalSize) / 2;\n        const points = [];\n        for(let row = 0; row < gridSize; row++){\n            const rowPoints = [];\n            for(let col = 0; col < gridSize; col++){\n                const x = startX + col * cellSize;\n                const y = startY + row * cellSize;\n                rowPoints.push(new _utils__WEBPACK_IMPORTED_MODULE_2__.Point(row, col, x, y));\n            }\n            points.push(rowPoints);\n        }\n        this.pointsRef.current = points;\n    }\n    drawLine(start, end) {\n        const ctx = this.ctxRef.current;\n        if (start && end) {\n            ctx.strokeStyle = HIGHLIGHT_COLOR;\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            ctx.moveTo(start.x, start.y);\n            ctx.lineTo(end.x, end.y);\n            ctx.stroke();\n        }\n    }\n    drawLines() {\n        this.linesRef.current.forEach((line)=>line.draw(this.ctxRef.current));\n        if (this.currentLineRef.current) {\n            this.currentLineRef.current.draw(this.ctxRef.current);\n        }\n    }\n    drawGrid() {\n        const ctx = this.ctxRef.current;\n        const points = this.pointsRef.current;\n        const showYellow = this.showYellowRef.current;\n        points.flat().forEach((point)=>point.draw(ctx, showYellow, HIGHLIGHT_COLOR, FADED_COLOR));\n    }\n    generateYellowPoints() {\n        const gridSize = this.gridSizeRef.current;\n        const yellowPoints = [];\n        const areCollinear = (p1, p2, p3)=>{\n            return p1.x * (p2.y - p3.y) + p2.x * (p3.y - p1.y) + p3.x * (p1.y - p2.y) === 0;\n        };\n        const isValidPoint = (newPoint)=>{\n            for(let i = 0; i < yellowPoints.length; i++){\n                for(let j = i + 1; j < yellowPoints.length; j++){\n                    if (areCollinear(yellowPoints[i], yellowPoints[j], newPoint)) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        };\n        while(yellowPoints.length < 5){\n            const row = Math.floor(Math.random() * gridSize);\n            const col = Math.floor(Math.random() * gridSize);\n            const point = this.pointsRef.current[row][col];\n            if (!point.isYellow && isValidPoint(point)) {\n                point.setYellow(true);\n                yellowPoints.push(point);\n            }\n        }\n        this.yellowPointsRef.current = yellowPoints;\n        this.gameEndTimeRef.current = Date.now();\n    }\n    resetGame() {\n        this.currentLineRef.current = null;\n        this.linesRef.current = [];\n        const polygonsData = Object.entries(this.state.completedPolygons).reduce((acc, param)=>{\n            let [key, val] = param;\n            acc[Number(key)] = {\n                points: val.points.map((point)=>({\n                        row: point.row,\n                        col: point.col\n                    }))\n            };\n            return acc;\n        }, {});\n        const duplicatePolygonsData = Object.entries(this.state.duplicatePolygons).reduce((acc, param)=>{\n            let [key, val] = param;\n            acc[Number(key)] = {\n                points: val.points.map((point)=>({\n                        row: point.row,\n                        col: point.col\n                    }))\n            };\n            return acc;\n        }, {});\n        this.data = [\n            ...this.data,\n            {\n                polygons: polygonsData,\n                duplicatePolygons: duplicatePolygonsData,\n                yellowPoints: this.yellowPointsRef.current.map((yellowPoint)=>({\n                        row: yellowPoint.row,\n                        col: yellowPoint.col\n                    }))\n            }\n        ];\n        super.resetGame();\n        this.setState({\n            completedPolygons: {},\n            duplicatePolygons: {},\n            trial: this.state.trial + 1\n        });\n    }\n    renderGame() {\n        this.calculateResponsiveSize();\n        this.drawBackground();\n        this.initializePoints();\n        this.drawGrid();\n        setTimeout(()=>{\n            this.generateYellowPoints();\n            this.showYellowRef.current = true;\n            this.drawBackground();\n            this.drawGrid();\n        }, 1000);\n        this.startAnimationLoop();\n    }\n    constructor(props){\n        super(props), this.gridSizeRef = {\n            current: 5\n        }, this.gridTotalSizeRef = {\n            current: 0\n        }, this.pointsRef = {\n            current: []\n        }, this.yellowPointsRef = {\n            current: []\n        }, this.hoveredPointRef = {\n            current: null\n        }, this.showYellowRef = {\n            current: false\n        }, this.interactivityRadius = 0, this.currentLineRef = {\n            current: null\n        }, this.linesRef = {\n            current: []\n        }, this.state = {\n            ...this.state,\n            completedPolygons: {},\n            duplicatePolygons: {}\n        }, this.calculateResponsiveSize = ()=>{\n            if (!this.canvasRef.current) return;\n            const canvas = this.canvasRef.current;\n            const canvasWidth = canvas.width;\n            const canvasHeight = canvas.height;\n            const smallerDimension = Math.min(canvasWidth, canvasHeight);\n            const padding = smallerDimension * 0.50;\n            this.gridTotalSizeRef.current = smallerDimension - padding * 2;\n            const cellSize = this.gridTotalSizeRef.current / (this.gridSizeRef.current - 1);\n            this.interactivityRadius = Math.min(Math.max(cellSize / 3, 15), 30);\n        }, this.handleResize = ()=>{\n            this.calculateResponsiveSize();\n            this.initializePoints();\n            this.drawBackground();\n            this.drawGrid();\n            this.drawLines();\n        }, this.addEventListenersDuringGame = ()=>{\n            this.eventHandler.add(\"mousedown\", this.handleInteractionStart);\n            this.eventHandler.add(\"mousemove\", this.handleIntearctionMove);\n            this.eventHandler.add(\"mouseup\", this.handleInteractionEnd);\n            this.eventHandler.add(\"touchstart\", this.handleInteractionStart);\n            this.eventHandler.add(\"touchmove\", this.handleIntearctionMove);\n            this.eventHandler.add(\"touchend\", this.handleInteractionEnd);\n        }, this.getHUD = ()=>{\n            return this.state.isRunning ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex flex-col\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                        children: [\n                            \"Completed Polygons: \",\n                            Object.values(this.state.completedPolygons).length\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/devpatel/Documents/NeuroScout/src/components/game-components/games/Grid.tsx\",\n                        lineNumber: 182,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: this.resetLines,\n                            className: \"text-xl w-full mt-3\",\n                            children: \"Reset Lines\"\n                        }, void 0, false, {\n                            fileName: \"/Users/devpatel/Documents/NeuroScout/src/components/game-components/games/Grid.tsx\",\n                            lineNumber: 184,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/devpatel/Documents/NeuroScout/src/components/game-components/games/Grid.tsx\",\n                        lineNumber: 183,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/devpatel/Documents/NeuroScout/src/components/game-components/games/Grid.tsx\",\n                lineNumber: 181,\n                columnNumber: 7\n            }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {}, void 0, false, {\n                fileName: \"/Users/devpatel/Documents/NeuroScout/src/components/game-components/games/Grid.tsx\",\n                lineNumber: 188,\n                columnNumber: 7\n            }, this);\n        }, this.resetLines = ()=>{\n            this.linesRef.current = [];\n            this.currentLineRef.current = null;\n        }, this.animate = ()=>{\n            if (!this.canvasRef.current) return;\n            this.drawBackground();\n            this.drawGrid();\n            this.drawLines();\n            this.animationFrameIdRef.current = requestAnimationFrame(this.animate);\n        }, this.getInteractionPos = (event)=>{\n            const rect = this.canvasRef.current.getBoundingClientRect();\n            if (event instanceof MouseEvent) {\n                return {\n                    x: event.clientX - rect.left,\n                    y: event.clientY - rect.top\n                };\n            } else {\n                const touch = event.touches[0];\n                return {\n                    x: touch.clientX - rect.left,\n                    y: touch.clientY - rect.top\n                };\n            }\n        }, this.handleInteractionStart = (event)=>{\n            const { x, y } = this.getInteractionPos(event);\n            this.yellowPointsRef.current.forEach((point)=>{\n                const distance = this.calculateDistance({\n                    x,\n                    y\n                }, point);\n                if (distance <= this.interactivityRadius) {\n                    this.currentLineRef.current = new _utils__WEBPACK_IMPORTED_MODULE_2__.Line(point, point);\n                }\n            });\n        }, this.handleIntearctionMove = (event)=>{\n            var _this_currentLineRef_current;\n            const { x, y } = this.getInteractionPos(event);\n            if (this.currentLineRef.current) {\n                this.currentLineRef.current.end = {\n                    x,\n                    y\n                };\n            }\n            this.pointsRef.current.flat().forEach((point)=>{\n                const distance = this.calculateDistance({\n                    x,\n                    y\n                }, point);\n                point.setHovered(distance <= this.interactivityRadius && point.isYellow);\n            });\n            const start = (_this_currentLineRef_current = this.currentLineRef.current) === null || _this_currentLineRef_current === void 0 ? void 0 : _this_currentLineRef_current.start;\n            if (start) {\n                this.drawBackground();\n                this.drawGrid();\n                this.yellowPointsRef.current.forEach((point)=>{\n                    const distance = this.calculateDistance({\n                        x,\n                        y\n                    }, point);\n                    if (distance <= this.interactivityRadius) {\n                        if (this.currentLineRef.current.start == point) {\n                            return;\n                        }\n                        const newLine = new _utils__WEBPACK_IMPORTED_MODULE_2__.Line(start, point);\n                        if (!this.linesRef.current.some((line)=>line.isEquals(newLine))) {\n                            this.linesRef.current.push(newLine);\n                            this.currentLineRef.current.start = point;\n                            (0,_utils__WEBPACK_IMPORTED_MODULE_2__.detectPolygons)(this.linesRef.current, Object.values(this.state.completedPolygons), this.newPolygonDetected, this.duplicatePolygonDetected, this.nonCyclicPolygonDetected);\n                        }\n                    }\n                });\n            }\n            this.drawBackground();\n            this.drawGrid();\n            this.drawLines();\n        }, this.newPolygonDetected = (newPolygon)=>{\n            const updatedPolygons = this.state.completedPolygons;\n            updatedPolygons[Date.now() - this.gameEndTimeRef.current] = newPolygon;\n            this.setState({\n                completedPolygons: updatedPolygons\n            });\n            (0,_utils__WEBPACK_IMPORTED_MODULE_2__.highlightAndFadePolygon)(newPolygon, this.linesRef.current);\n            setTimeout(()=>{\n                this.linesRef.current = [];\n            }, 100);\n        }, this.duplicatePolygonDetected = (polygon)=>{\n            const duplicatePolygons = this.state.duplicatePolygons;\n            duplicatePolygons[Date.now() - this.gameEndTimeRef.current] = polygon;\n            this.setState({\n                duplicatePolygons: duplicatePolygons\n            });\n            (0,_utils__WEBPACK_IMPORTED_MODULE_2__.highlightAndFadePolygon)(polygon, this.linesRef.current, \"#FF0000\");\n            setTimeout(()=>{\n                this.linesRef.current = [];\n            }, 100);\n        }, this.nonCyclicPolygonDetected = (polygon)=>{\n            this.duplicatePolygonDetected(polygon);\n        }, this.handleInteractionEnd = ()=>{\n            this.currentLineRef.current = null;\n        };\n        this.data = [];\n        this.calculateResponsiveSize();\n        if (true) {\n            window.addEventListener('resize', this.handleResize);\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GridGame);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/game-components/games/Grid.tsx\n"));

/***/ })

});